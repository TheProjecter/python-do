#!/usr/bin/env python

import pygtk
pygtk.require('2.0')
import gtk

class GUI:
    
    def destroy(self,widget,data=None):
        gtk.main_quit()
    def load_dic(self):
        import os
        f = os.path.join(os.path.expanduser('~'),'.python-do.dic')
        if os.path.exists(f):
            import pickle
            return pickle.load(open(f, 'rb'))
        else:
            return []
    def save_dic(self):
        import os
        f = os.path.join(os.path.expanduser('~'), '.python-do.dic')
        import pickle
        pickle.dump(self.dic, open(f, 'wb'))
    def activate_cb(self,widget,data=None):
        import os
        cmd = self.entry.get_text()
        import re
        out = os.popen("which %s 2>&1" % cmd).read()
        if not re.match(r'which', out):
            if cmd not in [row[0] for row in self.liststore]:
                self.dic.append(cmd)
        os.system("%s &" % cmd)
        gtk.main_quit()
    def __init__(self):
        window = gtk.Window(gtk.WINDOW_TOPLEVEL)
        window.set_default_size(200,10)
        screen = gtk.gdk.Screen()
        width = screen.get_width()
        height = screen.get_height()
        window.move((width-200)//2, height - 150)
        window.connect("delete_event", self.destroy)
        box = gtk.VBox()
        box.show()
        window.add(box)
        self.completion = gtk.EntryCompletion()
        self.liststore = gtk.ListStore(str)
        self.dic = self.load_dic()
        for i in self.dic:
            self.liststore.append([i])
        self.completion.set_model(self.liststore)
        self.completion.set_text_column(0)
        self.entry = gtk.Entry()
        self.entry.set_completion(self.completion)
        self.entry.connect("activate", self.activate_cb)
        self.entry.show()
        box.pack_start(self.entry, True, True, 0)
        window.show()
    def main(self):
        gtk.main()

if __name__ == '__main__':
    GUI().main()
